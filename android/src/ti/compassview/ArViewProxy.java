/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.compassview;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.AsyncResult;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiMessenger;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.util.TiSensorHelper;
import org.appcelerator.titanium.view.TiUIView;

import com.sun.javafx.animation.TickCalculation;

import android.app.Activity;
import android.content.Context;

import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Message;
import android.view.Display;
import android.view.View;

import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import ti.modules.titanium.ui.widget.TiUIScrollView.TiScrollViewLayout;

/*
 * Sergey Volkov [6 minutes ago]
Better solution will be:
1. keep  `CompassviewModule.PROP_OFFSET` in `propertyAccessors`
2. override `propertyChanged` in `CompassView`
3. also implement `processProperties` in `CompassView`
 * 
 */
@Kroll.proxy(creatableInModule = CompassviewModule.class, propertyAccessors = { CompassviewModule.PROP_BEARING })
public class ArViewProxy extends TiScrollViewLayout implements SensorEventListener {

	KrollProxy proxy;
	private static final int MSG_FIRST_ID = TiScrollViewLayout.MSG_LAST_ID + 1;
	private static final int MSG_START = MSG_FIRST_ID + 600;
	private static final int MSG_STOP = MSG_FIRST_ID + 601;
	private static final int MSG_GET_BEARING = MSG_FIRST_ID + 602;
	private static final int MSG_SET_OFFSET = MSG_FIRST_ID + 603;

	private int currentDeviceOrientation = 0;
	private double offset = 0;
	private int duration = 0;
	LinearLayout container;
	private double contentWidth = 0;
	private int sensorDelay = SensorManager.SENSOR_DELAY_UI;
	private static final String LCAT = "TiAr";

	private static Context ctx = TiApplication.getInstance().getApplicationContext();
	final float density = ctx.getResources().getDisplayMetrics().density;
	final float scaledDensity = ctx.getResources().getDisplayMetrics().scaledDensity;

	private static SensorManager sensorManager = TiSensorHelper.getSensorManager();
	private Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION);

	public interface IOnFocusListenable {
		public void onWindowFocusChanged(boolean hasFocus);
	}

	private class TiArView extends TiUIView {
		public TiArView(final TiViewProxy proxy) {
			super(proxy);
			this.proxy = proxy;
			container = new LinearLayout(proxy.getActivity());
			container.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
			sensorManager.registerListener(ArViewProxy.this, sensor, sensorDelay);
			sensorManager.registerListener(ArViewProxy.this, sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION),
					sensorDelay);
			setNativeView(container);
		}
	}

	protected TiArView getView() {
		return (TiArView) getOrCreateView();
	}

	@Override
	public TiUIView createView(Activity activity) {
		TiUIView TiArView = new TiArView(this);
		TiArView.getLayoutParams().autoFillsHeight = true;
		TiArView.getLayoutParams().autoFillsWidth = true;
		return TiArView;
	}

	// Constructor
	public ArViewProxy() {
		super();
		Log.d(LCAT, "TiArViewProxy");
		// TiApplication.getAppRootOrCurrentActivity().onWindowFocusChanged(hasFocus);
	}

	@Override
	public boolean handleMessage(Message msg) {
		AsyncResult result = null;
		switch (msg.what) {
		case MSG_SET_OFFSET: {
			result = (AsyncResult) msg.obj;
			handleSetOffset((Double) result.getArg());
			result.setResult(null);
			return true;
		}
		case MSG_GET_BEARING: {
			result = (AsyncResult) msg.obj;
			result.setResult(handleGetBearing());
			return true;
		}
		case MSG_START: {
			result = (AsyncResult) msg.obj;
			handleStart();
			result.setResult(null);
			return true;
		}
		case MSG_STOP: {
			result = (AsyncResult) msg.obj;
			handleStop();
			result.setResult(null);
			return true;
		}
		default: {
			return super.handleMessage(msg);
		}
		}
	}

	@Kroll.method
	public void startTracking() {
		start();
	}

	@Kroll.method
	public void stopTracking() {
		stop();
	}

	@Kroll.method
	public void start() {
		if (TiApplication.isUIThread()) {
			Log.d(LCAT, "direct handleStart()");
			handleStart();
		} else {
			Log.d(LCAT, "indirect handleStart() by TiMessenger");
			TiMessenger.sendBlockingMainMessage(getMainHandler().obtainMessage(MSG_START));

		}
	}

	private void handleStart() {
		Log.d(LCAT, "handleStart()");
		@SuppressWarnings("deprecation")
		Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION);
		sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_GAME);
	}

	@Kroll.method
	public void stop() {
		if (TiApplication.isUIThread()) {
			handleStart();
		} else {
			TiMessenger.sendBlockingMainMessage(getMainHandler().obtainMessage(MSG_STOP));

		}
	}

	private void handleStop() {
		sensorManager.unregisterListener(this);
	}

	@Kroll.setProperty
	@Kroll.method
	public void setOffset(double offset) {

		if (TiApplication.isUIThread()) {
			Log.d(LCAT, "setOffset directly Java " + offset);
			this.offset = offset;
		} else {
			Log.d(LCAT, "setOffset by messenger Java " + offset);
			TiMessenger.sendBlockingMainMessage(getMainHandler().obtainMessage(MSG_SET_OFFSET, offset));
		}
	}

	private void handleSetOffset(double offset) {
		Log.d(LCAT, "setOffset handleSetOffset " + offset);
		this.offset = offset;
	}

	@Kroll.method
	@Kroll.getProperty
	public double getBearing() {
		if (TiApplication.isUIThread()) {
			return handleGetBearing();
		} else {
			return (Double) TiMessenger.sendBlockingMainMessage(getMainHandler().obtainMessage(MSG_SET_OFFSET));

		}
	}

	private float handleGetBearing() {
		return 0;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict opts) {
		super.handleCreationDict(opts);
		if (opts.containsKeyAndNotNull(CompassviewModule.PROP_DURATION)) {
			duration = opts.getInt(CompassviewModule.PROP_DURATION);
		}
		if (opts.containsKeyAndNotNull(CompassviewModule.PROP_OFFSET)) {
			offset = opts.getDouble(CompassviewModule.PROP_OFFSET);
		}
		if (opts.containsKeyAndNotNull("contentWidth")) {
			contentWidth = opts.getDouble("contentWidth");
		}
		Log.d(LCAT, "handleCreationDict");

	}

	@Override
	public void onAccuracyChanged(Sensor sensor, int event) {
	}

	private int getDeviceRotation() {
		Activity activity = TiApplication.getAppRootOrCurrentActivity();
		if (activity == null)
			return 0;
		Display display = activity.getWindowManager().getDefaultDisplay();
		int deviceRot = display.getRotation();
		if (currentDeviceOrientation != deviceRot) {
			currentDeviceOrientation = deviceRot;
		}
		return deviceRot * 90;
	}

	// http://stackoverflow.com/questions/15155985/android-compass-bearing
	@Override
	public void onSensorChanged(SensorEvent event) {
		float currentΦ = event.values[0];
		currentΦ += getDeviceRotation();
		int left = (int) (-currentΦ / 360 * contentWidth * density);
		// Log.d(LCAT, "Φ=" + currentΦ + " deviceRotation=" + getDeviceRotation() + "
		// left=" + left);
		// if (container != null)
		// container.setLeft(left);
	}

	private void scrollTo(int x) {
		x = TiConvert.toTiDimension(x, -1).getAsPixels(container);
	}

}