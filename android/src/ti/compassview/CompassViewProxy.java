/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.compassview;

import java.io.IOException;

import android.view.View;
import android.view.View.OnFocusChangeListener;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.AsyncResult;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiMessenger;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiFileFactory;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiSensorHelper;
import org.appcelerator.titanium.util.TiUIHelper;
import org.appcelerator.titanium.view.TiUIView;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Message;
import android.view.Display;
import android.view.animation.Animation;
import android.view.animation.LinearInterpolator;
import android.view.animation.RotateAnimation;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;

/*
 * Sergey Volkov [6 minutes ago]
Better solution will be:
1. keep  `CompassviewModule.PROP_OFFSET` in `propertyAccessors`
2. override `propertyChanged` in `CompassView`
3. also implement `processProperties` in `CompassView`
 * 
 */
@Kroll.proxy(creatableInModule = CompassviewModule.class, propertyAccessors = { CompassviewModule.PROP_BEARING })
public class CompassViewProxy extends TiViewProxy implements SensorEventListener {

	TiUIView view;
	private static final int MSG_FIRST_ID = TiViewProxy.MSG_LAST_ID + 1;
	private static final int MSG_START = MSG_FIRST_ID + 500;
	private static final int MSG_STOP = MSG_FIRST_ID + 501;
	private static final int MSG_GET_BEARING = MSG_FIRST_ID + 502;
	private static final int MSG_SET_OFFSET = MSG_FIRST_ID + 503;
	private float lastΦ = 0f;
	private int currentDeviceOrientation = 0;
	private int duration = 50;
	private int rotationType = CompassviewModule.TYPE_COMPASS;
	private String URL_REGEX = "^((https?|ftp)://|(www|ftp)\\.)?[a-z0-9-]+(\\.[a-z0-9-]+)+([/?].*)?$";

	private static final String LCAT = "TiCompass";

	private static SensorManager sensorManager = TiSensorHelper.getSensorManager();

	private double offset = 0.0f;
	private Bitmap bitmap;
	private Boolean autostart = true;
	private ImageView compassView;
	private Boolean hasFocus;

	public interface IOnFocusListenable {
		public void onWindowFocusChanged(boolean hasFocus);
	}

	private class CompassView extends TiUIView {
		public CompassView(final TiViewProxy proxy) {
			super(proxy);
			LayoutParams lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
			LinearLayout container = new LinearLayout(proxy.getActivity());
			container.setLayoutParams(lp);
			compassView = new ImageView(proxy.getActivity());
			compassView.setImageBitmap(bitmap);
			container.addView(compassView);
			setNativeView(container);
		}
	}

	@Override
	public TiUIView createView(Activity activity) {
		view = new CompassView(this);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}

	private Bitmap loadImageFromApplication(String imageName) {
		Bitmap bitmap = null;
		String url = null;
		try {
			url = resolveUrl(null, imageName);
			TiBaseFile file = TiFileFactory.createTitaniumFile(new String[] { url }, false);
			bitmap = TiUIHelper.createBitmap(file.getInputStream());
		} catch (IOException e) {
			Log.e(LCAT, " WheelView only supports local image files " + url);
		}
		return bitmap;
	}

	// Constructor
	public CompassViewProxy() {
		super();
		// TiApplication.getAppRootOrCurrentActivity().onWindowFocusChanged(hasFocus);
	}

	@Override
	public boolean handleMessage(Message msg) {
		AsyncResult result = null;
		switch (msg.what) {
		case MSG_SET_OFFSET: {
			result = (AsyncResult) msg.obj;
			handleSetOffset((Double) result.getArg());
			result.setResult(null);
			return true;
		}
		case MSG_GET_BEARING: {
			result = (AsyncResult) msg.obj;
			result.setResult(handleGetBearing());
			return true;
		}
		case MSG_START: {
			result = (AsyncResult) msg.obj;
			handleStart();
			result.setResult(null);
			return true;
		}
		case MSG_STOP: {
			result = (AsyncResult) msg.obj;
			handleStop();
			result.setResult(null);
			return true;
		}
		default: {
			return super.handleMessage(msg);
		}
		}
	}

	@Kroll.method
	public void startTracking() {
		start();
	}

	@Kroll.method
	public void stopTracking() {
		stop();
	}

	@Kroll.method
	public void start() {
		if (TiApplication.isUIThread()) {
			Log.d(LCAT, "direct handleStart()");
			handleStart();
		} else {
			Log.d(LCAT, "indirect handleStart() by TiMessenger");
			TiMessenger.sendBlockingMainMessage(getMainHandler().obtainMessage(MSG_START));

		}
	}

	private void handleStart() {
		Log.d(LCAT, "handleStart()");
		@SuppressWarnings("deprecation")
		Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION);
		sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_GAME);
	}

	@Kroll.method
	public void stop() {
		if (TiApplication.isUIThread()) {
			handleStart();
		} else {
			TiMessenger.sendBlockingMainMessage(getMainHandler().obtainMessage(MSG_STOP));

		}
	}

	private void handleStop() {
		sensorManager.unregisterListener(this);
	}

	@Kroll.setProperty
	@Kroll.method
	public void setOffset(double offset) {

		if (TiApplication.isUIThread()) {
			Log.d(LCAT, "setOffset directly Java " + offset);
			this.offset = offset;
		} else {
			Log.d(LCAT, "setOffset by messenger Java " + offset);
			TiMessenger.sendBlockingMainMessage(getMainHandler().obtainMessage(MSG_SET_OFFSET, offset));
		}
	}

	private void handleSetOffset(double offset) {
		Log.d(LCAT, "setOffset handleSetOffset " + offset);
		this.offset = offset;
	}

	@Kroll.method
	@Kroll.getProperty
	public double getBearing() {
		if (TiApplication.isUIThread()) {
			return handleGetBearing();
		} else {
			return (Double) TiMessenger.sendBlockingMainMessage(getMainHandler().obtainMessage(MSG_SET_OFFSET));

		}
	}

	private float handleGetBearing() {
		return 0;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict opts) {
		super.handleCreationDict(opts);
		if (opts.containsKeyAndNotNull(CompassviewModule.PROP_DURATION)) {
			duration = opts.getInt(CompassviewModule.PROP_DURATION);
		}
		if (opts.containsKeyAndNotNull(CompassviewModule.PROP_OFFSET)) {
			offset = opts.getDouble(CompassviewModule.PROP_OFFSET);
		}
		if (opts.containsKeyAndNotNull(CompassviewModule.PROP_TYPE)) {
			Log.i(LCAT, CompassviewModule.PROP_TYPE + " imported");
			rotationType = opts.getInt(CompassviewModule.PROP_TYPE);
		}
		if (opts.containsKeyAndNotNull("autostart")) {
			autostart = opts.getBoolean("autostart");
		}
		if (opts.containsKeyAndNotNull(TiC.PROPERTY_IMAGE)) {
			String image = opts.getString(TiC.PROPERTY_IMAGE);

			Pattern p = Pattern.compile(URL_REGEX);
			Matcher m = p.matcher(image);// replace with string to compare
			if (m.find()) {
				Log.w(LCAT, "only images from resources are allowed");
			} else {
				bitmap = loadImageFromApplication(image);
			}
		} else
			Log.w(LCAT, "image missing");
	}

	@Override
	public void onAccuracyChanged(Sensor sensor, int event) {
	}

	private int getDeviceRotation() {
		Activity activity = TiApplication.getAppRootOrCurrentActivity();
		if (activity == null)
			return 0;
		Display display = activity.getWindowManager().getDefaultDisplay();
		int deviceRot = display.getRotation();
		if (currentDeviceOrientation != deviceRot) {
			currentDeviceOrientation = deviceRot;
		}
		return deviceRot * 90;
	}

	// http://stackoverflow.com/questions/15155985/android-compass-bearing
	@Override
	public void onSensorChanged(SensorEvent event) {

		final float PIVOT = 0.5f;
		final int TYPE = Animation.RELATIVE_TO_SELF;
		float currentΦ = event.values[0];
		Log.d(LCAT, "offset=" + offset + "  currentΦ=" + currentΦ + " deviceRotation=" + getDeviceRotation());
		currentΦ += getDeviceRotation();
		currentΦ += offset;
		RotateAnimation ra = new RotateAnimation(lastΦ, rotationType * currentΦ, TYPE, PIVOT, TYPE, PIVOT);
		ra.setDuration(duration);
		ra.setInterpolator(new LinearInterpolator());
		ra.setFillAfter(true);
		if (compassView != null) {
			compassView.startAnimation(ra);
		}
		lastΦ = rotationType * currentΦ;
	}
}
